{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onDestroy } from \"svelte\";\n  import { sec2time, notifyMe } from \"./utils.js\";\n  import \"bulma/css/bulma.css\";\n\n  // Presets\n\n  let presets = [\n    { name: \"Work\", seconds: 5, isRest: false },\n    { name: \"Long Work\", seconds: 2700, isRest: false },\n    { name: \"Rest\", seconds: 500, isRest: true },\n    { name: \"Long Rest\", seconds: 1800, isRest: true }\n  ];\n\n  // Default preset is index-0, which is work right now\n  let selected = presets[0];\n\n  let isStarted = false;\n\n  // Keep track of completed Pomodoros\n  let completedPomodoros = 0; // should load from offline\n\n  // The computed display based on seconds\n  $: display = sec2time(seconds);\n\n  // The selected preset's seconds\n  $: seconds = selected.seconds;\n\n  // isRest is based on the selected preset\n  $: isRest = selected.isRest;\n\n  function handleReset() {\n    isStarted = false;\n    seconds = selected.seconds;\n  }\n\n  // notifications on?\n  $: isNotificationOn = Notification.permission === \"granted\" ? true : false;\n  let notificationsOn = false;\n\n  async function handleNotificationRequest() {\n    await Notification.requestPermission();\n    if (Notification.permission === \"granted\") {\n      notificationsOn = true;\n    }\n  }\n\n  const interval = setInterval(() => {\n    if (isStarted && seconds > 0) {\n      console.log(seconds);\n      seconds -= 1;\n      if (seconds == 0) {\n        isStarted = false;\n        if (!isRest) {\n          // This wasn't rest; increasee pomodoro\n          completedPomodoros += 1;\n          notifyMe(`${selected.name} period is done!`);\n        }\n      }\n    }\n  }, 1000);\n\n  // Clean up\n  onDestroy(() => clearInterval(interval));\n</script>\n\n<style>\n  :global(body) {\n    display: flex;\n    height: 100%;\n    width: 100%;\n    align-items: center;\n    justify-content: center;\n  }\n</style>\n\n<div class=\"container is-fluid\" style=\"max-width: 450px;\">\n  <div class=\"field has-addons\">\n    <p class=\"control\">\n      <button class=\"button is-small\" on:click={handleNotificationRequest}>\n        <span class=\"icon\">\n          {isNotificationOn || notificationsOn ? '‚úîÔ∏è' : '‚ùå'}\n        </span>\n        <span>Notifications</span>\n      </button>\n    </p>\n  </div>\n  <div class=\"columns \">\n    <div class=\"column\">\n      <div class=\"box\">\n        <div class=\"level\">\n          <div class=\"level-item\">\n            <progress\n              class=\"progress is-small {isStarted ? 'is-success' : ''}\"\n              value={seconds}\n              max={selected.seconds}>\n              {(seconds / selected.seconds) * 100}\n            </progress>\n          </div>\n        </div>\n        <div class=\"level\">\n          <div class=\"level-item content\">\n            <p class=\"subtitle is-1 has-text-weight-light \">{display}</p>\n          </div>\n        </div>\n        <div class=\"level\">\n          <div class=\"level-item content\">\n            <span\n              class=\"tag is-medium {completedPomodoros > 0 ? 'is-success' : 'is-light'}\">\n              üçÖ {completedPomodoros}\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"level\">\n        <div class=\"level-left\">\n          <div class=\"level-item\">\n            <div class=\"field\">\n              <div class=\"control\">\n                <div class=\"select\">\n                  <select bind:value={selected}>\n                    {#each presets as preset}\n                      <option value={preset}>{preset.name}</option>\n                    {/each}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"level-right\">\n          <div class=\"level-item\">\n            <div class=\"field is-grouped\">\n              <p class=\"control\">\n                <button\n                  disabled={seconds === 0 ? 'disabled' : ''}\n                  class=\"button {isStarted ? 'is-danger' : 'is-success'}\"\n                  on:click={() => (isStarted = !isStarted)}>\n                  {isStarted ? 'Stop' : 'Start'}\n                </button>\n              </p>\n              <p class=\"control\">\n                <button class=\"button\" on:click={handleReset}>Reset</button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAmEU,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC"
}